#!/usr/bin/env python3
# Hey Emacs, this is -*-python-*-

# Copyright 2016 Peter Liljenberg <peter.liljenberg@gmail.com>
# Licensed under GPLv3, see file LICENSE in the top directory

from CobolSharp import *
from CobolSharp.structure import Method

import sys
import argparse
import networkx as nx

OUTPUT_FORMATS = [
    'full_stmt_graph',
    'stmt_graph',
    'branch_graph',
    'acyclic_graph',
    'code'
    ]

def main(args):
    for source_path in args.sources:
        program = parse(open(source_path, 'rt'))

        # TODO: allow specifying dest dirs
        output_base = source_path

        process_program(args, output_base, program)


def process_program(args, output_base, program):
    formatter = PythonishFormatter(TextOutputter(sys.stdout))

    for section in program.proc_div.sections_in_order():
        full_graph = StmtGraph.from_section(section)

        if args.format == 'full_stmt_graph':
            nx.nx_agraph.write_dot(full_graph.graph, '{}_{}.dot'.format(output_base, section.name))
            continue

        reachable = full_graph.reachable_subgraph()

        if args.format == 'stmt_graph':
            nx.nx_agraph.write_dot(reachable.graph, '{}_{}.dot'.format(output_base, section.name))
            continue

        branch_join = BranchJoinGraph.from_stmt_graph(reachable)

        if args.format == 'branch_graph':
            nx.nx_agraph.write_dot(branch_join.graph, '{}_{}.dot'.format(output_base, section.name))
            continue

        dag = AcyclicBranchGraph.from_branch_graph(branch_join)

        if args.format == 'acyclic_graph':
            nx.nx_agraph.write_dot(dag.graph, '{}_{}.dot'.format(output_base, section.name))
            continue

        block = dag.flatten_block()
        formatter.format_method(Method(section, block))


#
# Set up the command argument parsing
#

parser = argparse.ArgumentParser(description='Cobol revisualiser')
parser.add_argument('sources', nargs='+', help='Cobol source files', metavar="COBOL_FILE")
parser.add_argument('-f', '--format', help='output format', choices=OUTPUT_FORMATS, default='code')


if __name__ == '__main__':
    args = parser.parse_args()
    main(args)
